---
title: "Trabajo 1"
description: |
  Cargar una base de datos de tiempo al evento a cometer un delito que deriva en sentencia definitiva condenatoria, pero pasando por completar/abandonar tratamiento por uso de sustancias.
date: "`r format(Sys.time(),'%B %d, %Y')`"
author: "Andrés González Santa Cruz"
format: 
  html:
    code-fold: true
editor: visual
---

```{css}
#| echo: false

script src = "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"

```

```{js zoom-jquery, echo = FALSE}
$(document).ready(function() {

$('body').prepend('<div class=\"zoomDiv\"><img src=\"\" class=\"zoomImg\"></div>');

// onClick function for all plots (img's)

$('img:not(.zoomImg)').click(function() {
$('.zoomImg').attr('src', $(this).attr('src')).css({width: '100%'});
$('.zoomDiv').css({opacity: '1', width: 'auto', border: '1px solid white', borderRadius: '5px', position: 'fixed', top: '50%', left: '50%', marginRight: '-50%', transform: 'translate(-50%, -50%)', boxShadow: '0px 0px 50px #888888', zIndex: '50', overflow: 'auto', maxHeight: '100%'});
});

// onClick function for zoomImg

$('img.zoomImg').click(function() {
$('.zoomDiv').css({opacity: '0', width: '0%'});
});
});
```

```{css hideOutput-lib-src, echo = FALSE}
<script src="https://github.com/AGSCL/gine_brechas_pandemia/blob/main/hideOutput.js"></script>
```

```{js hideOutput, echo = FALSE}
$(document).ready(function() {

\$chunks = \$('.fold');

\$chunks.each(function () { // add button to source code chunks
if ( \$(this).hasClass('s') ) {
    \$('pre.r', this).prepend("\<div class=\\"showopt\\"\>Show Source\</div\>\<br style=\\"line-height:22px;\\"/\>");
    \$('pre.r', this).children('code').attr('class', 'folded');
    } // add button to output chunks

    if ( \$(this).hasClass('o') ) {
        \$('pre:not(.r)', this).has('code').prepend("\<div class=\\"showopt\\"\>Show Output\</div\>\<br style=\\"line-height:22px;\\"/\>");
        \$('pre:not(.r)', this).children('code:not(r)').addClass('folded'); // add button to plots
        \$(this).find('img').wrap('\<pre class=\\"plot\\"\>\</pre\>');
        \$('pre.plot', this).prepend("\<div class=\\"showopt\\"\>Show Plot\</div\>\<br style=\\"line-height:22px;\\"/\>");
        \$('pre.plot', this).children('img').addClass('folded');
        }
}); // hide all chunks when document is loaded

\$('.folded').css('display', 'none') // function to toggle the visibility
\$('.showopt').click(function() {
        var label = \$(this).html();
        if (label.indexOf("Show") \>= 0) {
            \$(this).html(label.replace("Show", "Hide"));
        } else {
        \$(this).html(label.replace("Hide", "Show"));
        }

\$(this).siblings('code, img').slideToggle('fast', 'swing');
});
});
```

```{=html}
<style type="text/css">

.showopt {

background-color: #004c93; color: #FFFFFF; width: 100px; height: 20px; text-align: center; vertical-align: middle !important; float: right; font-family: sans-serif; border-radius: 8px;

}

.showopt:hover {
background-color: #dfe4f2;
color: #004c93;

}

pre.plot {
background-color: white !important;
}

.tablelines table, .tablelines td, .tablelines th {
border: 1px solid black;
}

.centrado {
text-align: center;
}

.table.center {
margin-left:auto;
margin-right:auto;
}

/* https://vivekjaiskumar.medium.com/css-is-and-not-selector-17c942ec83f :is()*/

/* Applies to outputs that are not code other than R*/

pre {
overflow-x: auto !important;
}

pre code {
word-wrap: normal !important;
white-space: pre !important;
}

/*
pre:not(.sourceCode) {
white-space: nowrap !important;
}
*/
.sourceCode { /* Important gives precedence */
font-size: 10px !important;
line-height: 50% !important;
}
body{ /* Normal */
text-align: justify;
}
.superbigimage{
overflow-y:scroll;
height:350px;
white-space: nowrap;
overflow-x: auto;
width:100%;
}
.superbigimage img{
overflow-y: scroll;
overflow-x: hidden;
}
.message { color:#446C6E; font-family: monospace;font-size: 10px; line-height: 110%; font-weight: bold;}
div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 5px; text-align: justify;}
div.red { background-color:#e6bab1; border-radius: 5px; padding: 5px; text-align: justify;}
.pandoc-table { /* Should add !important; but it seems no necessary */
margin-left:auto; /* To center */
margin-right:auto;
border-collapse: collapse;
table-layout: auto;
font-size: 11px;
overflow-y: auto;
max-height:450px !important;
white-space: nowrap;
overflow-x: auto;
width:450px;
}
.pandoc-table th {/* header */
text-align: center !important;
font-size: 10px;
padding: 0px;
}
.pandoc-table td {
text-align: left !important;
font-size: 9px;
padding: 0px;
}
.pandoc-table caption {
text-align: left !important;
font-size: 11px !important;
}

.center-table {
text-align: left !important;
font-size: 9px;
padding: 0px;
overflow-y:scroll;
height:400px;
overflow-x: scroll;
}

.controlly{
overflow-y:scroll;
height:350px;
overflow-x: scroll;

}
</style>
```
```{=html}
<!-- We gotta do each function to hide code and outputs per section, by every ID, we gotta create a different function -->

<script>
function myFunction1() {
var x = document.getElementById("myDIV");
if (x.style.display === "none") {
x.style.display = "block";
} else {
x.style.display = "none";
}
}
</script>

<script>
function myFunction2() {
var x = document.getElementById("myDIV2");
if (x.style.display === "none") {
x.style.display = "block";
} else {
x.style.display = "none";
}
}
</script>
```
```{r entorno-python}
rm(list = ls()) 
unlink("Trabahjo-1_files", recursive=T)
unlink("Trabahjo 1_files", recursive=T)
#fuentes: 
#https://rpubs.com/georgy_makarov/897844
path<-paste0(getwd(),'/env')

#Sys.setenv(RETICULATE_PYTHON =  "")

#Sys.setenv(RETICULATE_PYTHON =  Sys.which("python"))

#reticulate::py_config()
#use_python(paste0(path,"/Scripts/python.exe"))

#Sys.setenv(LD_LIBRARY_PATH =  paste0(path,"/Lib"))
#Sys.setenv(LD_LIBRARY_PATH_64 =  paste0(path,"/Lib"))
#instalar paquetes de funcionalidades básicas para tener ubicaciones relativas y acceso a python (reticulate)
if(!require(reticulate)){install.packages("reticulate")}
if(!require(rstudioapi)){install.packages("rstudioapi")}


invisible("Create env")
#https://stackoverflow.com/questions/54043607/how-to-set-pyenv-python-for-reticulate
#Directory H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/env is not a Python virtualenv
#virtualenv_create(envname  = path, packages = c("pip", "statsmodels", "matplotlib", "numpy", "pandas", "scipy"))
# "C:/Users/andre/anaconda3/python.exe" -m venv "H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/9_Computacion_Estadistica/env"

#FUENTES:
#https://rstudio.github.io/reticulate/articles/versions.html
#Virtual environment functions are not supported on Windows (the use of conda environments is recommended on Windows).

invisible("Use environment")
#https://ugoproto.github.io/ugo_r_doc/pdf/reticulate.pdf


# tx  <- readLines(paste0(path,"/pyvenv.cfg"))
# tx[[1]] <- paste0("home = ",gsub('/', '\\', paste0(path,"/Scripts/python.exe"), fixed=T))
# tx[[3]] <- "version = 3.8.0"

#writeLines(tx, con=paste0(path,"/pyvenv.cfg"))

#H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/env/Scripts/python.exe"
#use_virtualenv(path)

#usar entorno virtual ya creado
#información sobre entorno virtual
#py_discover_config()
#conda_python(envname =  "r-scrublet")


# FUENTES
#https://akrabat.com/creating-virtual-environments-with-pyenv/
#https://rstudio.github.io/reticulate/reference/install_python.html
#https://github.com/pyenv/pyenv/wiki#suggested-build-environment
#https://github.com/pyenv/pyenv
#https://stackoverflow.com/questions/56755156/reticulate-not-setting-python-path
#https://github.com/rstudio/reticulate/issues/291#issuecomment-437143751
#https://github.com/pyenv/pyenv
#https://github.com/pyenv-win/pyenv-win#installation
#https://stackoverflow.com/questions/52060867/how-to-use-pip-for-pyenv
#https://github.com/pyenv/pyenv/issues/2417
```

```{python, eval=F}
!pyenv install -l | findstr 3.8
!pip install --upgrade pyenv-win
!env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install
!env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install 3.7.5
!pyenv build
```

<br>

# Carga de datos y exploración

## Cargar paquetes

Cargar paquetes

```{r}
#| message: false
#| include: false
#| warning: false

# limpiar completamente el entorno global environment

#Para importar bases
if(!require(rio)){install.packages("rio")}
#Para manipular bases de datos
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(tidylog)){install.packages("tidylog")}

#Para tabla 1
if(!require(tableone)){install.packages("tableone")}
if(!require(compareGroups)){install.packages("compareGroups")}
if(!require(Hmisc)){install.packages("Hmisc")}
if(!require(kableExtra)){install.packages("kableExtra")}
if(!require(DT)){install.packages("DT")}
#Para explorar relaciones bivariadas
if(!require(polycor)){install.packages("polycor")}
if(!require(corrplot)){install.packages("corrplot")}
#Para modelos de regresión
if(!require(jtools)){install.packages("jtools")}
#Para cargar paquetes
if(!require(pacman)){install.packages("pacman")}
#Para imputar, cargo los paqeutes con la función p_load, y en caso que no encuentre dicho paquete, instalo
pacman::p_load(missRanger, missForest, install=T)
#Para analizar supervivencia
pacman::p_load(survminer, survcomp, survRM2, flexsurv, mstate, rms, install=T)
#Para diseño de encuestas complejas o ponderación
if(!require(survey)){install.packages("survey")}
#para manipular tiempo
if(!require(lubridate)){install.packages("lubridate")}

######0.C. functions------------------
#ghgh
View(c(1,2))

read_excel_mult <- function(dir, filename) {
  assign(paste0(substr(filename, 1, 7)),read.delim(paste0(dir, filename),
        na.strings="null", header = T, fileEncoding="UTF-8"),envir = .GlobalEnv)
  }

#function to copy names
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,...) {
  write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
  return(x)}

#function to save datasets in excel files (x=object to change; y=name of the excel file)
guardar_tablas <- function (x,y) {writexl::write_xlsx(as.data.frame(x, keeprownames= T),paste0(y,".xlsx"))}


```

Load the data

```{r}
path<-dirname(rstudioapi::getSourceEditorContext()$path)
dir_c1<-paste0(gsub("22","19",path),"/Encriptado c1/Personas tratadas C1/")

#matches a string that starts with the number 2, followed by any number of characters, followed by a space, followed by the word "txt".
SISTRAT23_c1<-list.files(path=toString(dir_c1), pattern="202353")

#Import datasets
for (x in 1:length(SISTRAT23_c1)) {
  read.csv(paste0(dir_c1, SISTRAT23_c1[x])) |>
    as.data.frame() |>
    assign(paste0("SISTRAT_C1_",stringr::str_sub(SISTRAT23_c1[x], 1, 4)),
           .,
           envir = .GlobalEnv)
}
```

```{######0.D. DATASETS------------------}
#Define files in the Directory folder, as long as they have the excel extension,
#and they do not start with ~  (represent a working temporary file in excel)
SISTRAT_c1<-list.files(path=toString(dir_c1), all.files=T, pattern="^[2].*\\s*txt$")
SISTRAT_top<-list.files(path=toString(dir_top), all.files=T, pattern="^[t].*\\s*txt$")

#Import datasets
for (x in SISTRAT_c1) {
  read_excel_mult(as.character(dir_c1), x)
}

for (x in SISTRAT_top) {
  read_excel_mult(as.character(dir_top), x)
}

#only years from 2010 to 2018
tab_10_18=ls()[(ls() %in% paste0(c(2010:2018),"tab"))]

#unlist(list(ls()[grep("^[2].*tab",ls())]))

#Function to execute datasets of C1
tab_10_18_mod <- function(x,y) {  get(x) %>% dplyr::rename("HASH_KEY" = !!names(.[91])) %>%
    as.data.frame() %>% 
    assign(paste0(y, as.character(x)),.,envir = .GlobalEnv)
}
for (i in paste0(c(2010:2018),"tab")) {tab_10_18_mod(i,y="c1_")}

rm(list= ls()[(ls() %in% paste0(c(2010:2018),"tab"))])

#Apply function to every State dataset.
#Tab10_18<- lapply(mget(tab_10_18), function(x) tab_10_18_mod(x))

#TAB, incluiding dataset of 2019 (93 columns)
#tab_10_19=c(unlist(list(ls()[grep("^[2].*tab",ls())])),unlist(list(ls()[grep("*_En*",ls())])))

`2019_En` %>% dplyr::rename("HASH_KEY" = !!names(.[92])) %>%
  as.data.frame() %>% 
  assign(paste0("c1_", "2019tab"),.,envir = .GlobalEnv)

#top- replace columns
list_top_db=unlist(list(ls()[grep("^top",ls())]))

 tab_15_19_top_mod <- function(x) {  get(x) %>% dplyr::rename("HASH_KEY" = !!names(.[44])) %>%
    as.data.frame() %>% assign(paste0(as.character(x)),.,envir = .GlobalEnv)
}

for (i in list_top_db) {tab_15_19_top_mod(i)}

CONS_C1=rbindlist(mget(paste0("c1_",c(2010:2019),"tab")), idcol="TABLE", fill=T)
CONS_TOP=rbindlist(mget(list_top_db), idcol="TABLE")

CONS_C1 <- CONS_C1 %>% dplyr::mutate(row=1:nrow(CONS_C1)) %>% dplyr::select(row,everything())
CONS_TOP <- CONS_TOP %>% dplyr::mutate(row=1:nrow(CONS_TOP)) %>% dplyr::select(row,everything())

```

Esta base de datos está compuesta por registros de sujetos del SENDA del 2010 al 2019, más registros de delitos imputados a estas personas (si los hay) en el mismo periodo mediante solicitud a Fiscalía. La fecha de obtención de la base de datos (censura a la derecha) fue definida como el 13 de Noviembre de 2019. Las variables se describen a continuación

-   HASH (RUT encriptado en formato MD5 más un Salt-Key) `hash_key`
-   Motivo de egreso (completar=1) `tr_comp`
-   Delito en calidad imputado por el que recibe sentencia definitiva condenatoria (1= Presencia) `event_r`
-   Modalidad de tratamiento (Residencial o Ambulatorio) `tr_modality`
-   Edad (ingreso al tratamiento) `edad_al_ing_1`
-   Sexo `sex`
-   Edad de inicio del consumo de sustancias `edad_ini_cons`
-   Nivel educativo `escolaridad_rec`
-   Sustancia principal (ingreso al tratamiento) `sus_principal_mod`
-   Frecuencia de consumo de sustancias (sustancia principal) `freq_cons_sus_prin`
-   Condición ocupacional corregida (f) `condicion_ocupacional_corr`
-   Trastornos por consumo de sustancias concurrentes (consumo de varias sustancias) `policonsumo`
-   Número de hijos (dicotomizado) `num_hijos_mod_joel_bin`
-   Situación de vivienda (estatus de tenencia) `tenencia_de_la_vivienda_mod`
-   Macrozona administrativa en Chile `macrozona`
-   Delitos violentos (previos al tratamiento) `n_off_vio`
-   Delitos de adquisición (previos al tratamiento) `n_off_acq`
-   Delitos relacionados con sustancias (previos al tratamiento) `n_off_sud`
-   Otros delitos (previos al tratamiento) `n_off_oth`
-   Comorbilidad psiquiátrica (CIE-10) (1= Nada)`dg_cie_10_rec`
-   Gravedad del trastorno por consumo de sustancias (estatus de dependencia) `dg_trs_cons_sus_or`
-   Clasificación socioeconómica `clas_r`
-   Porcentaje de personas en pobreza `porc_pobr`
-   Sustancia principal (diagnóstico inicial) `sus_ini_mod_mvv`
-   Año de nacimiento corregido `ano_nac_corr`
-   Estado de convivencia (recodificado) (Con pareja/hijos, Con familia de origen, Solo, Otros) `con_quien_vive_joel`
-   Comorbilidad física (CIE-10) `fis_comorbidity_icd_10`

**Revisar si el tiempo al delito incluye a gente que estaba en el tratamiento o sólo fue desde que completa en adelante**

<br>

## Normalización y transformación de datos

### Tiempo al evento

Generamos algunas variables. En base a la diferencia entre `edad_al_ing_1` y la edad al tiempo de censura `age_at_censor_date` (13 de Noviembre 2019).

```{r}
base_senda_fiscalia<-
  base_senda_fiscalia %>%
  #si hay evento (completar tratamiento), entonces se calcula la diferencia en la edad entre egresar e ingresar del tratamiento. Si no lo hay, se reemplaza por la edad a la fecha de la censura (ya que no se registró el evento)= 
    dplyr::mutate(time_to_tr_comp=dplyr::case_when(tr_comp==1~ edad_al_egres_imp-edad_al_ing_1,
                                                   tr_comp==0~ age_at_censor_date-edad_al_ing_1, T~ NA_real_)) %>% 
  #si hay evento (cometer un delito que hubiera llevado a tener una sentencia definitiva condenatoria), entonces se calcula la diferencia en la edad al haber cometido el delito e ingresar del tratamiento. Si no lo hay, se reemplaza por la edad a la fecha de la censura (ya que no se registró el evento)=   
    dplyr::mutate(time_to_off=dplyr::case_when(event_r==1~ age_offending_imp-edad_al_ing_1,
                                                   event_r==0~ age_at_censor_date-edad_al_ing_1, T~ NA_real_)) %>% 
    dplyr::rename("offending"="event_r") %>% 
    dplyr::select(hash_key, time_to_tr_comp, tr_comp, time_to_off, offending, everything())


#etiquetamos las variables:
attr(base_senda_fiscalia$hash_key, "label") <- "HASH (RUT encriptado en formato MD5 más un Salt-Key)"
attr(base_senda_fiscalia$time_to_tr_comp, "label") <- "Tiempo a completar tratamiento"
attr(base_senda_fiscalia$time_to_off, "label") <- "Tiempo al delito en calidad de imputado"
attr(base_senda_fiscalia$tr_comp, "label") <- "Completa tratamiento (Completar=1/ Abandono=0)"
attr(base_senda_fiscalia$offending, "label") <- "Delito en calidad imputado por el que recibe sentencia definitiva condenatoria (1= Presencia)"
attr(base_senda_fiscalia$tr_modality, "label") <- "Modalidad de tratamiento (Residencial o Ambulatorio)"
attr(base_senda_fiscalia$edad_al_ing_1, "label") <- "Edad (ingreso al tratamiento)"
attr(base_senda_fiscalia$sex, "label") <- "Sexo"
attr(base_senda_fiscalia$edad_ini_cons, "label") <- "Edad de inicio del consumo de sustancias"
attr(base_senda_fiscalia$escolaridad_rec, "label") <- "Nivel educativo"
attr(base_senda_fiscalia$sus_principal_mod, "label") <- "Sustancia principal (ingreso al tratamiento)"
attr(base_senda_fiscalia$freq_cons_sus_prin, "label") <- "Frecuencia de consumo de sustancias (sustancia principal)"
attr(base_senda_fiscalia$condicion_ocupacional_corr, "label") <- "Condición ocupacional corregida (f)"
attr(base_senda_fiscalia$policonsumo, "label") <- "Trastornos por consumo de sustancias concurrentes (consumo de varias sustancias)"
attr(base_senda_fiscalia$num_hijos_mod_joel_bin, "label") <- "Número de hijos (dicotomizado)"
attr(base_senda_fiscalia$tenencia_de_la_vivienda_mod, "label") <- "Situación de vivienda (estatus de tenencia)"
attr(base_senda_fiscalia$macrozona, "label") <- "Macrozona administrativa en Chile"
attr(base_senda_fiscalia$n_off_vio, "label") <- "Delitos violentos (previos al tratamiento)"
attr(base_senda_fiscalia$n_off_acq, "label") <- "Delitos de adquisición (previos al tratamiento)"
attr(base_senda_fiscalia$n_off_sud, "label") <- "Delitos relacionados con sustancias (previos al tratamiento)"
attr(base_senda_fiscalia$n_off_oth, "label") <- "Otros delitos (previos al tratamiento)"
attr(base_senda_fiscalia$dg_cie_10_rec, "label") <- "Comorbilidad psiquiátrica (CIE-10) (1= Nada)"
attr(base_senda_fiscalia$dg_trs_cons_sus_or, "label") <- "Gravedad del trastorno por consumo de sustancias (estatus de dependencia)"
attr(base_senda_fiscalia$clas_r, "label") <- "Clasificación socioeconómica"
attr(base_senda_fiscalia$porc_pobr, "label") <- "Porcentaje de personas en pobreza"
attr(base_senda_fiscalia$sus_ini_mod_mvv, "label") <- "Sustancia principal (diagnóstico inicial)"
attr(base_senda_fiscalia$ano_nac_corr, "label") <- "Año de nacimiento corregido"
attr(base_senda_fiscalia$con_quien_vive_joel, "label") <- "Estado de convivencia (recodificado) (Con pareja/hijos, Con familia de origen, Solo, Otros)"
attr(base_senda_fiscalia$fis_comorbidity_icd_10, "label") <- "Comorbilidad física (CIE-10)"

vars_cov<-c("motivodeegreso_mod_imp_rec", "tr_modality", "edad_al_ing_1", "sex", "edad_ini_cons", "escolaridad_rec", "sus_principal_mod", "freq_cons_sus_prin", "condicion_ocupacional_corr", "policonsumo", "num_hijos_mod_joel_bin", "tenencia_de_la_vivienda_mod", "macrozona", "n_off_vio", "n_off_acq",  "n_off_sud", "n_off_oth", "dg_cie_10_rec", "dg_trs_cons_sus_or", "clas_r", "porc_pobr", "sus_ini_mod_mvv", "ano_nac_corr", "con_quien_vive_joel", "fis_comorbidity_icd_10")

```

A continuación, se presenta una tabla con los datos descritos.

::: controlly
```{r desc, echo=T, fig.align='center', message=T, error=T, eval=T}
# Treatment status (Early dropout/Late dropout/Treatment completion) 

as.data.frame.TableOne <- function(x, ...) {capture.output(print(x,
                          showAllLevels = TRUE, ...) -> x)
  y <- as.data.frame(x)
  y$characteristic <- dplyr::na_if(rownames(x), "")
  y <- y %>%
  fill(characteristic, .direction = "down") %>%
  select(characteristic, everything())
  rownames(y) <- NULL
  y}


#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){

  # select the correct markup
  # one * for italics, two ** for bold
  map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
  markup <- map[value]  

  for (r in rows){
    for(c in cols){

      # Make sure values are not factors
      df[[c]] <- as.character( df[[c]])

      # Update formatting
      df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
    }
  }

  return(df)
}

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){

  # select the correct markup
  # one * for italics, two ** for bold
  map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
  markup <- map[value]  

  for (r in rows){
    for(c in cols){

      # Make sure values are not factors
      df[[c]] <- as.character( df[[c]])

      # Update formatting
      df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
    }
  }

  return(df)
}
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

tbone_desc<-
CreateTableOne(vars=c(setdiff(vars_cov, "motivodeegreso_mod_imp_rec"), "offending"), data=  subset(base_senda_fiscalia, select=c(setdiff(vars_cov, "motivodeegreso_mod_imp_rec"), "offending")), factorVars = setdiff(vars_cov, c("motivodeegreso_mod_imp_rec","edad_al_ing_1", "edad_ini_cons","ano_nac_corr", "porc_pobr")), smd=T, strata="policonsumo", addOverall = T, includeNA=T, test=T)

as.data.frame.TableOne(tbone_desc, smd=T, nonnormal= T)%>% 
  dplyr::mutate(char2=characteristic) %>% 
  tidyr::fill(char2) %>% 
  dplyr::select(char2,everything()) %>% 
  dplyr::mutate(level=ifelse(is.na(level),"[Missing]",level)) %>% 
  dplyr::mutate(char2=dplyr::case_when(characteristic=="NA"~NA_character_,T~as.character(characteristic))) %>% 
  format_cells(1, 1:length(names(.)), "bold") %>%
  dplyr::select(-1) %>% 
  knitr::kable(size=10, format="markdown",caption= "Summary descriptives, no PSU(0), PSU (1), by Baseline Treatment Status", escape=T)
#kable(size=10, format="html",caption= "Summary descriptives, by Baseline Treatment Status") %>%     kableExtra::kable_classic()
```
:::

En python, visualizamos las variables generadas

### Kaplan Meier

```{python}
#!pip install statsmodels
#!pip install lifelines
#import subprocess
import statsmodels.api as sm
import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter
from lifelines.utils import median_survival_times
from lifelines.statistics import pairwise_logrank_test

sf = sm.SurvfuncRight(r.base_senda_fiscalia["time_to_tr_comp"], r.base_senda_fiscalia["tr_comp"])

fig = sf.plot()
lcb, ucb = sf.simultaneous_cb()
ax = fig.get_axes()[0]
ax.fill_between(sf.surv_times, lcb, ucb, color='lightgrey')
ax.set_ylabel("Proportion")

# result = multivariate_logrank_test(r.base_senda_fiscalia['time_to_tr_comp'], r.base_senda_fiscalia['policonsumo'], r.base_senda_fiscalia['tr_comp'])
# result.test_statistic
# result.p_value
# result.print_summary()
```

```{python}
from lifelines import KaplanMeierFitter
from lifelines.utils import restricted_mean_survival_time

kmf = KaplanMeierFitter()

print("Tiempo promedio restringido a tres años: "+
str(round(
restricted_mean_survival_time(KaplanMeierFitter().fit(durations=r.base_senda_fiscalia['time_to_tr_comp'], event_observed=r.base_senda_fiscalia['tr_comp'])
.survival_function_, t=3),2)))

T= r.base_senda_fiscalia['time_to_tr_comp']
E= r.base_senda_fiscalia['tr_comp']
policonsumo = r.base_senda_fiscalia['policonsumo']
df=  r.base_senda_fiscalia['policonsumo']
```

```{python, "no"}
kmf.fit(T, E)

fig, ax =  plt.subplots()
kmf.plot(color='C0',ax=ax, label="TOdos") #_survival_function
kmf.plot()
# ax.set(
#     title='Curva de supervivencia Kaplan-Meier',
#     xlabel='Años',
#     ylabel='Probabilidad estimada de supervivencia (tiempo a completar tratamiento)'
# );
```

```{python}
# Create Kaplan-Meier estimators
kmf_no = KaplanMeierFitter()
kmf_yes = KaplanMeierFitter()
kmf_unknown = KaplanMeierFitter()

#para dejarla en entero
#.astype(int)

# Fit models
kmf_no.fit(
    durations=r.base_senda_fiscalia[r.base_senda_fiscalia['policonsumo'] == 0]['time_to_tr_comp'],
    event_observed=r.base_senda_fiscalia[r.base_senda_fiscalia['policonsumo'] == 0]['tr_comp']
)

kmf_yes.fit(
    durations=r.base_senda_fiscalia[r.base_senda_fiscalia['policonsumo'] == 1]['time_to_tr_comp'],
    event_observed=r.base_senda_fiscalia[r.base_senda_fiscalia['policonsumo'] == 1]['tr_comp']
)

# Plot survival curves
fig, ax = plt.subplots()
kmf_no.plot_survival_function(
    color='C0',
    label='No',
    ax=ax
)
kmf_yes.plot_survival_function(
    color='C1',
    label='Yes',
    ax=ax
)

ax.set(
    title='Kaplan-Meier survival curves by policonsumo',
    xlabel='Months',
    ylabel='Estimated Probability of Survival'
);
```

```{python, eval=F}
fig, ax =  plt.subplots()

print(enumerate(r.base_senda_fiscalia['policonsumo'].unique()))

for i, sex in enumerate(r.base_senda_fiscalia['policonsumo'].unique()):
    # Mask category
    mask = f'sex == "{sex}"'
    # Fit model
    kmf = KaplanMeierFitter()
    kmf.fit(
        durations= T,
        event_observed= E
    )
    # Plot survival curves
    kmf.plot_survival_function(
        color=f'C{i + 1}',
        label=sex,
        ax=ax
    )

ax.set(
    title='Kaplan-Meier survival curves formales and females',
    xlabel='Months',
    ylabel='Estimated Probability of Survival'
);



```

<br>

# Información de sesión

```{r session-info, echo=T, error=T, message=TRUE, paged.print=TRUE}
message(paste0("Librería R: ", Sys.getenv("R_LIBS_USER")))
message(paste0("Fecha: ",Sys.Date()))
message(paste0("Contexto editor: ", path))

sesion_info <- devtools::session_info()
dplyr::select(
  tibble::as_tibble(sesion_info$packages),
  c(package, loadedversion, source)
) %>% 
  DT::datatable(filter = 'top', colnames = c('Row number' =1,'Paquete' = 2, 'Versión'= 3),
              caption = htmltools::tags$caption(
        style = 'caption-side: top; text-align: left;',
        '', htmltools::em('Paquetes en R')),
      options=list(
initComplete = htmlwidgets::JS(
        "function(settings, json) {",
        "$(this.api().tables().body()).css({
            'font-family': 'Helvetica Neue',
            'font-size': '50%', 
            'code-inline-font-size': '15%', 
            'white-space': 'nowrap',
            'line-height': '0.75em',
            'min-height': '0.5em'
            });",#;
        "}")))


 py_list_packages()%>% 
  DT::datatable(filter = 'top', colnames = c('Row number' =1,'Paquete' = 2, 'Versión'= 3),
              caption = htmltools::tags$caption(
        style = 'caption-side: top; text-align: left;',
        '', htmltools::em('Paquetes en Python')),
      options=list(
initComplete = htmlwidgets::JS(
        "function(settings, json) {",
        "$(this.api().tables().body()).css({
            'font-family': 'Helvetica Neue',
            'font-size': '50%', 
            'code-inline-font-size': '15%', 
            'white-space': 'nowrap',
            'line-height': '0.75em',
            'min-height': '0.5em'
            });",#;
        "}")))
```

guardar avances

```{r}
 save.image("Trabajo 1.RData")
```
